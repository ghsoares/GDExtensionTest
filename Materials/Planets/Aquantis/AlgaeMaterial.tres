[gd_resource type="ShaderMaterial" load_steps=7 format=2]

[ext_resource path="res://Textures/Grass.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform sampler2D terrainHeightMap;
uniform vec2 terrainSize;
uniform float terrainResolution;

uniform float grassAmount : hint_range(0.0, 1.0) = 1.0;
uniform float grassHeight = 16.0;
uniform sampler2D grassTexture;
uniform sampler2D grassGradient;

uniform float windSpeed = 16.0;
uniform float windFrequency = 4.0;
uniform float verticalFrequency = 4.0;
uniform float verticalMagnitude = 4.0;

uniform mat4 playerTransform;
uniform float playerDistortionDistance = 16.0;
uniform sampler2D playerDistortionCurve;
uniform float playerDistortionMagnitude = 2.0;

varying vec2 v;

float Ease(float x, float c) {return x;}

float Random (vec2 uv) {return sin(uv.x) * .5 + .5;}

float SampleHeight() {return terrainSize.y * .5;}

float GetTerrainY() {return terrainSize.y - SampleHeight();}

void vertex() {
	v = VERTEX;
}

float GetPlayerDistortion() {
	vec2 dist = vec2(0.0);
	
	vec2 playerOrigin = playerTransform[3].xy + vec2(0.0, 4.0);
	vec2 off = (playerOrigin - vec2(v.x, GetTerrainY()));
	off.y = min(off.y, 0.0);
	vec2 dir = -normalize(off);
	float l = length(off);
	float t = 1.0 - clamp(l / playerDistortionDistance, 0.0, 1.0);
	t = texture(playerDistortionCurve, vec2(t, 0.0)).r;
	
	t *= playerDistortionMagnitude;
	
	return t;
}

void fragment() {
	float two_pi = radians(360.0);
	
	float grassWidth = vec2(textureSize(grassTexture, 0)).r;
	float terrainY = GetTerrainY();
	float terrainDiff = terrainY - v.y;
	
	float grassPosX = v.x;
	float uvX = grassPosX / grassWidth;
	float uvY = terrainDiff / grassHeight;
	
	float wind = sin(uvY * verticalFrequency * two_pi + uvX * two_pi + abs(windSpeed) * .1 * TIME * two_pi);
	grassPosX -= wind * uvY * verticalMagnitude;
	
	grassPosX = floor(grassPosX);
	uvX = grassPosX / grassWidth;
	
	float grassH = texture(grassTexture, vec2(uvX, 0.0)).r;
	float chance = Random(vec2(grassPosX, 0.0));
	grassH -= (Ease(chance, -8.0) + 1.0) * (1.0 - grassAmount);
	grassH *= grassHeight;
	
	grassH -= GetPlayerDistortion() * grassHeight;
	
	//grassH = grassHeight;
	
	float t = 1.0 - terrainDiff / grassH;
	
	t = mix(t, 1.0, step(terrainY, v.y));
	
	COLOR *= texture(grassGradient, vec2(t, 0.0));
	
//	COLOR.rg = GetPlayerDistortion() * .5 + .5;
//	COLOR.b = 1.0;
	
	COLOR.a *= mix(step(terrainDiff, grassH), 1.0, step(terrainY, v.y));
}










"

[sub_resource type="Gradient" id=2]
colors = PoolColorArray( 0.0483208, 0.16291, 0.233398, 1, 0, 1, 0.537109, 1 )

[sub_resource type="GradientTexture" id=3]
gradient = SubResource( 2 )

[sub_resource type="Curve" id=4]
_data = [ Vector2( 0, 0 ), 0.0, 1.0, 0, 1, Vector2( 1, 1 ), 1.0, 0.0, 1, 0 ]

[sub_resource type="CurveTexture" id=5]
curve = SubResource( 4 )

[resource]
shader = SubResource( 1 )
shader_param/terrainSize = Vector2( 960, 540 )
shader_param/terrainResolution = null
shader_param/grassAmount = 0.25
shader_param/grassHeight = 64.0
shader_param/windSpeed = -16.0
shader_param/windFrequency = 1.0
shader_param/verticalFrequency = 4.0
shader_param/verticalMagnitude = 4.0
shader_param/playerTransform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 480, 262, 0 )
shader_param/playerDistortionDistance = 16.0
shader_param/playerDistortionMagnitude = 1.0
shader_param/grassTexture = ExtResource( 2 )
shader_param/grassGradient = SubResource( 3 )
shader_param/playerDistortionCurve = SubResource( 5 )
