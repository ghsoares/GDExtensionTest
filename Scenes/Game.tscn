[gd_scene load_steps=13 format=2]

[ext_resource path="res://Scenes/Planet.tscn" type="PackedScene" id=1]
[ext_resource path="res://Scripts/Game.cs" type="Script" id=2]
[ext_resource path="res://Materials/Earth/Terrain.tres" type="Material" id=3]
[ext_resource path="res://Materials/Earth/Clouds.tres" type="Material" id=4]
[ext_resource path="res://Textures/Ship.png" type="Texture" id=5]
[ext_resource path="res://Scripts/UI/Debug.cs" type="Script" id=6]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float bloomRadius = 1.0;
uniform vec3 bloomThreshold = vec3(1.0);
uniform float bloomIntensity = 1.0;

vec3 GetBloomPixel(sampler2D tex, vec2 uv, vec2 texPixelSize) {
	return max(texture(tex, uv).rgb - bloomThreshold, 0f) * (1f + bloomThreshold);
}

vec3 GetBloom(sampler2D tex, vec2 uv, vec2 texPixelSize) {
	vec3 bloom = vec3(0.0);
	vec2 off = vec2(2) * texPixelSize * bloomRadius;
	bloom += GetBloomPixel(tex, uv + off * vec2(-1, -1), texPixelSize * bloomRadius) * 0.292893;
	bloom += GetBloomPixel(tex, uv + off * vec2(-1, 0), texPixelSize * bloomRadius) * 0.5;
	bloom += GetBloomPixel(tex, uv + off * vec2(-1, 1), texPixelSize * bloomRadius) * 0.292893;
	bloom += GetBloomPixel(tex, uv + off * vec2(0, -1), texPixelSize * bloomRadius) * 0.5;
	bloom += GetBloomPixel(tex, uv + off * vec2(0, 0), texPixelSize * bloomRadius) * 1.0;
	bloom += GetBloomPixel(tex, uv + off * vec2(0, 1), texPixelSize * bloomRadius) * 0.5;
	bloom += GetBloomPixel(tex, uv + off * vec2(1, -1), texPixelSize * bloomRadius) * 0.292893;
	bloom += GetBloomPixel(tex, uv + off * vec2(1, 0), texPixelSize * bloomRadius) * 0.5;
	bloom += GetBloomPixel(tex, uv + off * vec2(1, 1), texPixelSize * bloomRadius) * 0.292893;
	bloom /= 4.171573f;
	return bloom;
}

void fragment() {
	vec4 col = texture(TEXTURE, UV);
	
	vec3 bloom = GetBloom(TEXTURE, UV, TEXTURE_PIXEL_SIZE);
	col.rgb += bloom * bloomIntensity;
	
	COLOR = col;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/bloomRadius = 1.0
shader_param/bloomThreshold = Vector3( 1, 1, 1 )
shader_param/bloomIntensity = 1.0

[sub_resource type="ViewportTexture" id=3]
viewport_path = NodePath("View")

[sub_resource type="Gradient" id=4]
offsets = PoolRealArray( 0, 0.493261, 1 )
colors = PoolColorArray( 1, 0.25, 0.25, 1, 1, 1, 0.25, 1, 0.25, 1, 0.25, 1 )

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

uniform float blurRadius = 1f;

float Ease(float x, float c) {
	x = clamp(x, 0f, .999f);
	float curve1 = 1f - pow(1f - x, 1f / c);
	float curve2 = pow(x, c);
	float curve3 = pow(x * 2f, -c) * .5f;
	float curve4 = (1f - pow(1f - (x - .5f) * 2f, -c)) * .5f + .5f;
	float curveA = mix(curve1, curve2, step(1f, c));
	float curveB = mix(curve3, curve4, step(.5f, x));
	return mix(curveB, curveA, step(0f, c));
}

vec4 Blur(sampler2D tex, vec2 uv, vec2 pixSize) {
	uv = fract(uv);
	vec2 fUv = floor(uv / pixSize) * pixSize;
	//fUv += pixSize * .5f;
	
	vec4 tl = texture(tex, fUv + vec2(0, 0f));
	vec4 tr = texture(tex, fUv + vec2(pixSize.x, 0f));
	vec4 bl = texture(tex, fUv + vec2(0f, pixSize.y));
	vec4 br = texture(tex, fUv + vec2(pixSize.x, pixSize.y));
	
	vec2 t = fract(uv / pixSize);
	/*t.x = Ease(t.x, -2f);
	t.y = Ease(t.y, -2f);*/
	
	vec4 ct = mix(tl, tr, t.x);
	vec4 cb = mix(bl, br, t.x);
	
	return mix(ct, cb, t.y);
}

void fragment() {
	vec4 col = Blur(TEXTURE, UV, TEXTURE_PIXEL_SIZE * blurRadius);
	
	COLOR = col;
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/blurRadius = 3.0

[node name="Game" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="View" type="Viewport" parent="."]
size = Vector2( 960, 540 )
size_override_stretch = true
render_target_v_flip = true

[node name="Planet" parent="View" instance=ExtResource( 1 )]

[node name="Control" type="Control" parent="View"]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="ColorRect2" type="ColorRect" parent="View/Control"]
material = ExtResource( 3 )
anchor_top = 0.75
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Clouds" type="Line2D" parent="View"]
visible = false
material = ExtResource( 4 )
points = PoolVector2Array( 0, 64, 960, 64 )
width = 256.0
default_color = Color( 1, 1, 1, 1 )
texture_mode = 2

[node name="ZoomCamera" type="Camera2D" parent="."]
visible = false
current = true
process_mode = 0
limit_left = 0
limit_top = 0
limit_right = 960
limit_bottom = 540

[node name="ViewTex" type="TextureRect" parent="."]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
texture = SubResource( 3 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="UI" type="CanvasLayer" parent="."]

[node name="HUD" type="Control" parent="UI"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 16.0
margin_top = 16.0
margin_right = -16.0
margin_bottom = -16.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Debug" type="RichTextLabel" parent="UI/HUD"]
anchor_right = 1.0
anchor_bottom = 1.0
bbcode_enabled = true
script = ExtResource( 6 )
__meta__ = {
"_edit_use_anchors_": false
}
fpsGradient = SubResource( 4 )

[node name="TextureRect" type="TextureRect" parent="."]
visible = false
material = SubResource( 6 )
margin_right = 145.0
margin_bottom = 145.0
texture = ExtResource( 5 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}
