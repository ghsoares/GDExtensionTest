[gd_scene load_steps=58 format=2]

[ext_resource path="res://Scripts/Player.cs" type="Script" id=1]
[ext_resource path="res://Textures/Ship.png" type="Texture" id=2]
[ext_resource path="res://Scripts/Player/PlayerStateMachine.cs" type="Script" id=3]
[ext_resource path="res://Scripts/Player/States/PlayerHoverState.cs" type="Script" id=4]
[ext_resource path="res://Scripts/Player/ParticleSystems/PlayerRocketParticleSystem.cs" type="Script" id=5]
[ext_resource path="res://Scripts/Player/ParticleSystems/PlayerExplosionParticleSystem.cs" type="Script" id=6]
[ext_resource path="res://Textures/BayerMatrixDithering.png" type="Texture" id=7]
[ext_resource path="res://Scripts/Player/ParticleSystems/PlayerGroundParticleSystem.cs" type="Script" id=8]
[ext_resource path="res://Scripts/Player/States/PlayerLandedState.cs" type="Script" id=9]
[ext_resource path="res://Scripts/Player/States/PlayerDeadState.cs" type="Script" id=10]
[ext_resource path="res://Scripts/Player/States/PlayerNextLevelState.cs" type="Script" id=11]
[ext_resource path="res://Scripts/LiquidAgent.cs" type="Script" id=12]
[ext_resource path="res://Scripts/Particle Systems/ParticleSystemGroup.cs" type="Script" id=13]
[ext_resource path="res://Scripts/Particle Systems/ParticleSystemRenderer2D.cs" type="Script" id=14]
[ext_resource path="res://Textures/Glow.png" type="Texture" id=15]

[sub_resource type="PhysicsMaterial" id=1]
friction = 0.25

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

uniform float warpMargin = 16f;
uniform vec2 texSize = vec2(16f);
uniform sampler2D warpNoise;
uniform float warpNoiseEaseCurve = -2f;
uniform float warpTransition : hint_range(0f, 1f);
uniform float warpTransitionCurve = -2f;
uniform float warpStretchAmount = 3f;
uniform sampler2D transitionGradient : hint_black;
uniform sampler2D energyCurve : hint_black;
uniform sampler2D transitionGradientMixCurve : hint_black;

float Ease(float x, float c) {
	x = clamp(x, 0f, 1f);
	
	float curve1 = 1f - pow(1f - x, 1f / c);
	float curve2 = pow(x, c);
	
	float curve3 = pow(x * 2f, -c) * .5f;
	float curve4 = (1f - pow(1f - (x - .5f) * 2f, -c)) * .5f + .5f;
	
	float curveA = c < 1f ? curve1 : curve2;
	float curveB = x < .5f ? curve3 : curve4;
	
	return c == 0f ? 0f : (c > 0f ? curveA : curveB);
}

void vertex() {
	VERTEX.y -= (1f - UV.y) * warpMargin;
	UV.y -= (1f - UV.y) * (warpMargin / texSize.y);
}

void fragment() {
	vec2 uv = UV;
	
	float warp = texture(warpNoise, clamp(uv, vec2(0f), vec2(1f))).r;
	warp = Ease(warp, warpNoiseEaseCurve);
	warp -= 1f;
	warp += warpTransition * 2f;
	warp = clamp(warp, 0f, 1f);
	warp = Ease(warp, warpTransitionCurve);
	uv.y += warp * (warpMargin / texSize.y);
	uv.y /= (1f + warp * warpStretchAmount);
	
	vec4 transitionColor = texture(transitionGradient, vec2(warp, 0f));
	transitionColor *= (1f + texture(energyCurve, vec2(warp, 0f)).r);
	float mixT = texture(transitionGradientMixCurve, vec2(warp, 0f)).r;
	
	COLOR *= texture(TEXTURE, uv);
	COLOR.a *= step(0f, uv.y);
	COLOR.a *= step(uv.y, 1f);
	
	COLOR.rgb = mix(COLOR.rgb, transitionColor.rgb, mixT);
	COLOR.a = mix(COLOR.a, COLOR.a * transitionColor.a, mixT);
}




"

[sub_resource type="Curve" id=3]
_data = [ Vector2( 0, 1 ), 0.0, -1.0, 0, 1, Vector2( 1, 0 ), -1.0, 0.0, 1, 0 ]

[sub_resource type="CurveTexture" id=4]
curve = SubResource( 3 )

[sub_resource type="Gradient" id=5]
offsets = PoolRealArray( 0, 0.775801, 1 )
colors = PoolColorArray( 0, 0.941406, 1, 1, 0, 0.537255, 1, 1, 0, 0.537255, 1, 0 )

[sub_resource type="GradientTexture" id=6]
gradient = SubResource( 5 )

[sub_resource type="Curve" id=7]
_data = [ Vector2( 0, 0 ), 0.0, 14.515, 0, 0, Vector2( 0.165268, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 1 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=8]
curve = SubResource( 7 )

[sub_resource type="OpenSimplexNoise" id=9]
seed = 1
octaves = 2
period = 16.0

[sub_resource type="NoiseTexture" id=10]
width = 256
height = 1
noise = SubResource( 9 )

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 2 )
shader_param/warpMargin = 128.0
shader_param/texSize = Vector2( 16, 16 )
shader_param/warpNoiseEaseCurve = 1.0
shader_param/warpTransition = 0.0
shader_param/warpTransitionCurve = 8.0
shader_param/warpStretchAmount = 4.0
shader_param/warpNoise = SubResource( 10 )
shader_param/transitionGradient = SubResource( 6 )
shader_param/energyCurve = SubResource( 4 )
shader_param/transitionGradientMixCurve = SubResource( 8 )

[sub_resource type="CapsuleShape2D" id=12]
radius = 6.0
height = 2.0

[sub_resource type="CircleShape2D" id=13]
radius = 2.0

[sub_resource type="Shader" id=14]
code = "shader_type canvas_item;
render_mode blend_add;

uniform sampler2D ditheringMatrix;
uniform float ditherScale = 1f;

void fragment() {
	COLOR *= texture(TEXTURE, UV);
	
	float d = distance(UV, vec2(.5f)) / .5f;
	
	vec2 ditheringSize = vec2(textureSize(ditheringMatrix, 0)) * ditherScale;
	vec2 scSize = 1f / SCREEN_PIXEL_SIZE;
	
	vec2 ratio = scSize / ditheringSize;
	vec2 ditheringUv = ratio * SCREEN_UV;
	
	float b = COLOR.a + texture(ditheringMatrix, ditheringUv).r;
	b = step(1f, b);
	
	COLOR.a *= step(d, 1.0);
	COLOR.a *= step(UV.x, 1.0);
	COLOR.a *= step(0.0, UV.y);
}"

[sub_resource type="ShaderMaterial" id=15]
shader = SubResource( 14 )
shader_param/ditherScale = 1.0
shader_param/ditheringMatrix = ExtResource( 7 )

[sub_resource type="QuadMesh" id=16]

[sub_resource type="Curve" id=17]
_data = [ Vector2( 0, 0.5 ), 0.0, -0.0899085, 0, 0, Vector2( 1, 1 ), -1.04742, 0.0, 0, 0 ]

[sub_resource type="Gradient" id=18]
offsets = PoolRealArray( 0, 0.361204, 0.802676, 1 )
colors = PoolColorArray( 0.08, 0, 0.23, 0, 0, 0.291016, 1, 1, 0, 1, 0.765625, 1, 1, 1, 1, 1 )

[sub_resource type="QuadMesh" id=19]

[sub_resource type="Curve" id=20]
_data = [ Vector2( 0, 0 ), 0.0, 1.4, 0, 0, Vector2( 1, 1 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="Curve" id=21]
max_value = 4.0
_data = [ Vector2( 0, 2 ), 0.0, -2.75783, 0, 0, Vector2( 0.966, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 4 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="Gradient" id=22]
offsets = PoolRealArray( 0, 0.75 )
colors = PoolColorArray( 0.215686, 0, 0.0627451, 0, 1.5, 1.5, 1.5, 1 )

[sub_resource type="Curve" id=23]
_data = [ Vector2( 0, 0 ), 0.0, 0.0, 0, 1, Vector2( 0.750791, 0 ), 0.0, 0.0, 0, 0, Vector2( 0.750791, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 1 ), 0.0, 0.0, 1, 0 ]

[sub_resource type="Shader" id=24]
code = "shader_type canvas_item;

uniform float bumpness = 8f;
uniform float threshold = 0f;
uniform vec3 lightDirection = vec3(1f, 1f, 0f);
uniform float lightMultiply = 1f;
uniform float lightAdd = 0f;
uniform float lightSteps = 2f;
uniform float gradientSteps = 8f;
uniform sampler2D gradient;
uniform sampler2D lightGradient;
uniform sampler2D lightMultiplyCurve;
uniform float borderTransition = 32f;

varying vec2 v;

void vertex() {
	v = VERTEX;
}

void fragment() {
	vec2 size = v / UV;
	
	float nc = texture(TEXTURE, UV).r;
	float nx = texture(TEXTURE, UV + vec2(TEXTURE_PIXEL_SIZE.x, 0f)).r - nc;
	float ny = texture(TEXTURE, UV + vec2(0f, TEXTURE_PIXEL_SIZE.y)).r - nc;
	
	vec3 normal = normalize(vec3(vec2(nx, ny) * bumpness, 1f));
	
	float d = (dot(normal, normalize(lightDirection)) * lightMultiply + lightAdd) * .5f + .5f;
	
	d = floor(d * lightSteps) / (lightSteps - 1f);
	d = clamp(d, 0f, 1f);
	
	float t = floor(nc * gradientSteps) / (gradientSteps - 1f);
	t = clamp(t, 0f, 1f);
	
	vec4 unlit = texture(gradient, vec2(t, 0f));
	vec4 diffuse = unlit * texture(lightGradient, vec2(d, 0f));
	
	vec4 color = mix(unlit, diffuse, texture(lightMultiplyCurve, vec2(t, 0f)).r);
	
	COLOR = color;
	COLOR.a *= nc > threshold ? 1.0 : 0.0;
	
	float b = v.x;
	b = min(b, size.x - v.x);
	b = min(b, v.y);
	b = min(b, size.y - v.y);
	b = clamp(b / borderTransition, 0f, 1f);
	COLOR.a *= b;
}"

[sub_resource type="Gradient" id=25]
offsets = PoolRealArray( 0, 0.608824, 0.864706, 1 )
colors = PoolColorArray( 0.256836, 0, 0.173063, 1, 1, 0, 0, 1, 0.986328, 1, 0, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=26]
gradient = SubResource( 25 )

[sub_resource type="Gradient" id=27]
colors = PoolColorArray( 0.299805, 0.179473, 0.223892, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=28]
gradient = SubResource( 27 )

[sub_resource type="Curve" id=29]
_data = [ Vector2( 0, 1 ), 0.0, -0.0960083, 0, 0, Vector2( 0.664566, 0 ), -3.15863, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=30]
curve = SubResource( 29 )

[sub_resource type="ShaderMaterial" id=31]
shader = SubResource( 24 )
shader_param/bumpness = 32.0
shader_param/threshold = 0.195
shader_param/lightDirection = Vector3( -2, 2, 4 )
shader_param/lightMultiply = 3.141
shader_param/lightAdd = -0.09
shader_param/lightSteps = 1.0
shader_param/gradientSteps = 8.0
shader_param/borderTransition = 32.0
shader_param/gradient = SubResource( 26 )
shader_param/lightGradient = SubResource( 28 )
shader_param/lightMultiplyCurve = SubResource( 30 )

[sub_resource type="QuadMesh" id=32]

[sub_resource type="Shader" id=33]
code = "shader_type canvas_item;
render_mode blend_add;

uniform float easeCurve = -2f;
uniform vec2 alphaRange = vec2(0f, .25f);
uniform sampler2D noise;
uniform vec2 noiseTiling = vec2(512f);
uniform vec2 noiseMotion;
uniform float noiseMagnitude = .1f;

float Ease(float x, float c) {
	x = clamp(x, 0f, 1f);
	
	float curve1 = 1f - pow(1f - x, 1f / c);
	float curve2 = pow(x, c);
	
	float curve3 = pow(x * 2f, -c) * .5f;
	float curve4 = (1f - pow(1f - (x - .5f) * 2f, -c)) * .5f + .5f;
	
	float curveA = c < 1f ? curve1 : curve2;
	float curveB = x < .5f ? curve3 : curve4;
	
	return c == 0f ? 0f : (c > 0f ? curveA : curveB);
}

void fragment() {
	float d = distance(UV, vec2(.5f)) * 2f;
	d = Ease(d, easeCurve);
	
	float n = texture(noise, (FRAGCOORD.xy + noiseMotion * TIME) / noiseTiling).r;
	//n *= clamp(1f - d, 0f, 1f);
	d += n * noiseMagnitude;
	
	d = 1f - clamp(d, 0f, 1f);
	d = mix(alphaRange.r, alphaRange.y, d);
	
	COLOR.r *= d;
}





"

[sub_resource type="OpenSimplexNoise" id=34]

[sub_resource type="NoiseTexture" id=35]
seamless = true
noise = SubResource( 34 )

[sub_resource type="ShaderMaterial" id=36]
shader = SubResource( 33 )
shader_param/easeCurve = 2.0
shader_param/alphaRange = Vector2( 0, 1 )
shader_param/noiseTiling = Vector2( 196, 196 )
shader_param/noiseMotion = Vector2( 0, 32 )
shader_param/noiseMagnitude = 0.85
shader_param/noise = SubResource( 35 )

[sub_resource type="ViewportTexture" id=37]
viewport_path = NodePath("Particles/Explosion/Explosion_1/Renderer2D/Viewport")

[sub_resource type="Shader" id=38]
code = "shader_type canvas_item;
render_mode blend_add;

uniform float innerRadius = 1f;

void fragment() {
	float d = distance(UV, vec2(.5f)) / .5f;
	
	COLOR.a *= step(d, 1f);
	COLOR.a *= step(innerRadius, d);
}"

[sub_resource type="ShaderMaterial" id=39]
shader = SubResource( 38 )
shader_param/innerRadius = 0.9

[sub_resource type="QuadMesh" id=40]

[sub_resource type="Curve" id=41]
_data = [ Vector2( 0, 1 ), -2.48516, -0.0582949, 0, 0, Vector2( 1, 0 ), -3.42906, 0.0, 0, 0 ]

[sub_resource type="Gradient" id=42]
offsets = PoolRealArray( 0, 0.5 )
colors = PoolColorArray( 0.215686, 0, 0.0627451, 0, 1, 1, 1, 1 )

[node name="Player" type="RigidBody2D"]
collision_mask = 2
physics_material_override = SubResource( 1 )
gravity_scale = 0.0
contacts_reported = 8
contact_monitor = true
script = ExtResource( 1 )
platformZoomDistanceRange = Vector2( 64, 196 )
maxSafeVelocity = 16.0

[node name="WaterAgent" type="Node2D" parent="."]
z_index = 4096
script = ExtResource( 12 )

[node name="Body" type="Node2D" parent="."]

[node name="Sprite" type="Sprite" parent="Body"]
material = SubResource( 11 )
texture = ExtResource( 2 )

[node name="Col" type="CollisionShape2D" parent="."]
visible = false
position = Vector2( 0, -1 )
shape = SubResource( 12 )

[node name="Col2" type="CollisionShape2D" parent="."]
visible = false
position = Vector2( -6, 6 )
shape = SubResource( 13 )

[node name="Col3" type="CollisionShape2D" parent="."]
visible = false
position = Vector2( 6, 6 )
shape = SubResource( 13 )

[node name="Particles" type="Node2D" parent="."]

[node name="Rocket" type="Node2D" parent="Particles"]
material = SubResource( 15 )
position = Vector2( 0, 6 )
script = ExtResource( 5 )
local = true
numParticles = 64
mesh = SubResource( 16 )
sizeOverLife = SubResource( 17 )
colorOverLife = SubResource( 18 )
spreadAngleRange = Vector2( 0, 7.5 )
velocityRange = Vector2( 64, 64 )
sizeRange = Vector2( 4, 8 )
lifetimeRange = Vector2( 0.2, 0.4 )

[node name="KickOff" type="Node2D" parent="Particles"]
material = SubResource( 15 )
position = Vector2( 0, 6 )
script = ExtResource( 5 )
local = true
numParticles = 64
mesh = SubResource( 16 )
sizeOverLife = SubResource( 17 )
colorOverLife = SubResource( 18 )
spreadAngleRange = Vector2( 70, 90 )
velocityRange = Vector2( 32, 32 )
sizeRange = Vector2( 3, 6 )
lifetimeRange = Vector2( 0.2, 0.4 )

[node name="Ground" type="Node2D" parent="Particles"]
material = SubResource( 15 )
position = Vector2( 0, 6 )
script = ExtResource( 8 )
numParticles = 64
gravity = Vector2( 0, 0 )
mesh = SubResource( 19 )
sizeOverLife = SubResource( 20 )
colorOverLife = SubResource( 18 )
maxRate = 32.0
maxRange = 48.0
hitSpread = 32.0
sizeRange = Vector2( 8, 16 )

[node name="Explosion" type="Node2D" parent="Particles"]
script = ExtResource( 13 )
recursive = true

[node name="Explosion_1" type="Node2D" parent="Particles/Explosion"]
script = ExtResource( 6 )
numParticles = 64
lifetime = 2.0
gravity = Vector2( 0, -20 )
sizeOverLife = SubResource( 21 )
colorOverLife = SubResource( 22 )
amount = 16
radius = 4.0
velocityRange = Vector2( 0, 384 )
sizeRange = Vector2( 48, 64 )
lifetimeRange = Vector2( 2, 2.5 )
dragCurve = SubResource( 23 )

[node name="Renderer2D" type="Node2D" parent="Particles/Explosion/Explosion_1"]
material = SubResource( 31 )
script = ExtResource( 14 )
mesh = SubResource( 32 )
meshMaterial = SubResource( 36 )
bounds = Rect2( -160, -160, 320, 320 )

[node name="Viewport" type="Viewport" parent="Particles/Explosion/Explosion_1/Renderer2D"]
size = Vector2( 320, 320 )
transparent_bg = true
usage = 3
render_target_v_flip = true

[node name="Sprite" type="Sprite" parent="Particles/Explosion/Explosion_1/Renderer2D/Viewport"]
material = SubResource( 36 )
position = Vector2( 14.467, 32 )
scale = Vector2( 1.5, 1.5 )
texture = ExtResource( 15 )

[node name="Sprite4" type="Sprite" parent="Particles/Explosion/Explosion_1/Renderer2D/Viewport"]
material = SubResource( 36 )
position = Vector2( 156.321, 140.481 )
scale = Vector2( 1.5, 1.5 )
texture = ExtResource( 15 )

[node name="Sprite5" type="Sprite" parent="Particles/Explosion/Explosion_1/Renderer2D/Viewport"]
material = SubResource( 36 )
position = Vector2( 140.321, 152.481 )
scale = Vector2( 1.5, 1.5 )
texture = ExtResource( 15 )

[node name="TextureRect" type="TextureRect" parent="Particles/Explosion/Explosion_1/Renderer2D"]
visible = false
use_parent_material = true
margin_right = 320.0
margin_bottom = 320.0
texture = SubResource( 37 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Explosion_2" type="Node2D" parent="Particles/Explosion"]
material = SubResource( 39 )
script = ExtResource( 6 )
numParticles = 1
gravity = Vector2( 0, 0 )
mesh = SubResource( 40 )
sizeOverLife = SubResource( 41 )
colorOverLife = SubResource( 42 )
amount = 1
radius = 0.0
velocityRange = Vector2( 0, 0 )
sizeRange = Vector2( 200, 200 )
dragRange = Vector2( 0, 0 )

[node name="StateMachine" type="Node" parent="."]
script = ExtResource( 3 )

[node name="Hover" type="Node" parent="StateMachine"]
script = ExtResource( 4 )
kickOffForceAdd = 2.0
kickOffTime = 1.0

[node name="Dead" type="Node" parent="StateMachine"]
script = ExtResource( 10 )

[node name="Landed" type="Node" parent="StateMachine"]
script = ExtResource( 9 )

[node name="NextLevel" type="Node" parent="StateMachine"]
script = ExtResource( 11 )
